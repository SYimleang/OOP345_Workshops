/*
*****************************************************************************
                              reflect.txt
Full Name  : Sasawat Yimleang
Student ID#: 114036221
Email      : syimleang@myseneca.ca
Date of completion    : 24 November 2023

I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
*****************************************************************************
*/
In this workshop, I learned about new concepts in C++ programming, which is the Multi-Threading.

The main thing that I learned from this workshop is using multi-threads. By using multi-threads, Tasks can be distributed among threads and run in parallel at the same time. Which gives me better utilization by reducing the overall execution times.

From part 1, I execute the code without multi-threads:
The result of the time to compute is: 159 milliseconds
In part 2, I execute the code with multi-threads:
The result of the slowest time the thread to compute after divided is: 93 milliseconds


I have learned that using binary files has many benefits including being more efficient in terms of data integrity, size, and speed to read and write when compared to text files. We can see that the original file and the target file have the same size. Also, this file cannot be read by humans which means gives us more security.

In this workshop, binding the functions is important. When we do the iteration, threads will use the shared objects. To ensure that each thread will avoid the race conditions we need to use the std::bind to divide each thread works on a specific partition of the data, and helps ensure that each thread operates on its subset of the data without interfering with others.

// Using std::bind for each loop to let them compute in the same time without interfering
for (int i = 0; i < num_threads; ++i)
	avgThreads.push_back(std::thread(std::bind(computeAvgFactor, data, p_indices[i], p_indices[i + 1], std::ref(partialAvgs[i]))));

Additionally, I tried to do some experiments by putting sleep time in the functions computeAvgFactor and computeVarFactor. I found that this led me to task execution much slower and some threads throw an error sometimes.
// Code that I put for experimental
std::this_thread::sleep_for(std::chrono::nanoseconds(50));
// Error message that I found
ERROR: Something Bad Happened!
